function [Dim,DimR, Wout,Tvc, Proof]=Proof_lemma_2_5(m,accuracy)

%% USAGE:   
%%          [Dim, DimR,Wout,Tvc]=Proof_lemma_2_5(m,accuracy);  
%%                    d=m[1],e=m[2] integer number associated with x^d+y^e
%%                         accuracy is the round order: 10^{-accuary}=0     
%% PURPOSE: 
%%          1) Compute the dimension of the homology group of the regular
%%          fiber; the number of different eigenvalues; the rank of
%%          the subspace  spanned by the monodromy action of the
%%          fibration given by f:=x^d+y^e acting on each vanishing cycle
%%          v_l==(0 0... 0 1 0...0).
%%          2) Compute a bases for these subspace for each vanishin cycles.
%%          3) Compute the thoeric subsapce stated in lemma 2.5 for each     
%%          vanishing cycle.
%%          4) Proof of lemma 2.5 for d,e  given.
%% RETURN:  
%%          - Dim(1): is the dim of the homology, i.e.N=(e-1)*(d-1).
%%            Dim(2): is the number of different eigenvalues.
%%          - DimR(l): The rank of the orbit of v_l.my 
%%          - Wout(:,:,l): is the  subspace generated by the monodromy 
%%            action on the vanisihg cycle v_l.
%%          - Tvc(:,:,l): is the theoric subsapce stated in lemma 2.5 for
%%            the vansihing cycle v_l.
%%          - Proof: It is 1 if the subpsacein Tvc(:,:,l) is contained
%%            in Wout(:,:,l) for all l. It is 0 in other case.
%% NOTE:
%%          If all critical values are different, then the rank of 
%%          Wout(:,:,l) is equal to the dimension of the Krylov space 
%%          Else, Wout and Tvc are returned with 0. 
%% SEE ALSO: 
%%          MonMatrix, VanCycleSub
%% EXAMPLE_: 
%%           [Dim,DimR, Wout,Tvc, Proof]=Proof_lemma_2_5(6,4)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
d=m(1); e=m(2);
N=(e-1)*(d-1);
[Dim0,Wout,Vout]=VanCycleSub([d,e],accuracy); %% Compute the suspace generated for x^d+y^e
Tvc=zeros(size(Wout));
    
%% The next matrix save the information about the eigenvalues for any degree.
Dim(1)=N;  %% First colum, the degree
Dim(2)=Dim0; %% Second column, if the eigevalues are different
    
%% The next matrix save information about the rank of Mon(vi) i=1...N , for any degree.
for l=1:N
    DimR(l)=rank(Wout(:,:,l));
end

%%% Proof of Lemma 2.5
if N==Dim0 %% If the eigenvalues are different
   Proof_for_d=1;   %%%%This is the product os logic sentence for any degre d.
   for l=1:N
        %% First we identify the column and the row in the Dynkin diagram
        colj=ceil(l/(e-1));
        rowi=mod(l,(e-1)); if rowi==0 rowi=e-1; end
        p=gcd(d,colj);
        r=gcd(e,rowi);
                  
        %% Theoreic Vanishing cycles in the subspaces generated. They are in the columns of the Dynkin diagram, rn with n=1...d/r-1
        Tvci=zeros(size(Wout(:,:,l)));   %% Conditions by fixing i
        Cont=1;
        for mm=1:d/p-1
            %% v_{i,mp}
            Dij=(mm*p-1)*(e-1)+rowi; % from ij to position in the Dynkin
            Tvci(Dij,Cont)=1;
            Cont=Cont+1;
             for kk=1:p-1
                 %% v_{i,mp-k}+v_{i,mp+k}
                 Dij=((mm*p-kk)-1)*(e-1)+rowi; % from ij to position in the Dynkin
                 Tvci(Dij,Cont)=1; 
                 Dij=((mm*p+kk)-1)*(e-1)+rowi; % from ij to position in the Dynkin
                 Tvci(Dij,Cont)=1; 
                 Cont=Cont+1;

                 %% v_{i-1,mp-k}+v_{i-1,mp+k}+v_{i+1,mp-k}+v_{i+1,mp+k}
                 Dij=((mm*p-kk)-1)*(e-1)+(rowi-1); % from ij to position in the Dynkin
                 if rowi-1<e && rowi-1>0 Tvci(Dij,Cont)=1; end
                 Dij=((mm*p+kk)-1)*(e-1)+(rowi-1); % from ij to position in the Dynkin
                 if rowi-1<e && rowi-1>0 Tvci(Dij,Cont)=1; end
                 Dij=((mm*p-kk)-1)*(e-1)+(rowi+1); % from ij to position in the Dynkin
                 if rowi+1<e && rowi+1>0 Tvci(Dij,Cont)=1; end
                 Dij=((mm*p+kk)-1)*(e-1)+(rowi+1); % from ij to position in the Dynkin
                 if rowi+1<e && rowi+1>0 Tvci(Dij,Cont)=1; end
                 Cont=Cont+1;
             end
        end
            
        Tvcj=zeros(size(Wout(:,:,l)));   %% Conditions by fixing j
            Cont=1;
            for nn=1:e/r-1
                %% v_{nr,j}
                Dij=(colj-1)*(e-1)+nn*r; % from ij to position in the Dynkin
                Tvcj(Dij,Cont)=1; Cont=Cont+1;
                 for ll=1:r-1
                     %% v_{nr-l,j}+v_{nr+l,j}
                     Dij=(colj-1)*(e-1)+(nn*r-ll); % from ij to position in the Dynkin
                     Tvcj(Dij,Cont)=1;
                     Dij=(colj-1)*(e-1)+(nn*r+ll); % from ij to position in the Dynkin
                     Tvcj(Dij,Cont)=1; Cont=Cont+1;
                     
                      %% v_{nr-l,j-1}+v_{nr+l,j-1}+v_{nr-l,j+1}+v_{nr+l,j+1}
                     Dij=((colj-1)-1)*(e-1)+(nn*r-ll); % from ij to position in the Dynkin
                     if colj-1<d && colj-1>0 Tvcj(Dij,Cont)=1; end
                     Dij=((colj-1)-1)*(e-1)+(nn*r+ll); % from ij to position in the Dynkin
                     if colj-1<d && colj-1>0 Tvcj(Dij,Cont)=1; end
                     Dij=((colj+1)-1)*(e-1)+(nn*r-ll); % from ij to position in the Dynkin
                     if colj+1<d && colj+1>0 Tvcj(Dij,Cont)=1; end
                     Dij=((colj+1)-1)*(e-1)+(nn*r+ll); % from ij to position in the Dynkin
                     if colj+1<d && colj+1>0 Tvcj(Dij,Cont)=1; end
                 end
            end
                     
       %%%% Choosing the vanishing cycles described in Lemma 2.5
       Tlvc=[Tvci Tvcj]; %%% The union of two conditions
       [Z, pivots]=rref(Tlvc);
       Tvc0=Tlvc(:,pivots);
       Tvc(:,1:size(Tvc0,2),l)=Tvc0;
        %% Comparation between the theoric and computation of Vanishing cycles in the suspaces generated:
       [Z,generadores]=rref([real(Wout(:,:,l)),Tvc0(:,:)]); 
       %Proof_for_vl=prod(1:rank(Wout(:,:,l))==generadores)
       % We look if the Theoric van. cycles Tvc are in the span o f v_l Wout(:,:l)
       Proof_for_vl=(rank([round(Wout(:,:,l),10),Tvc0])==rank(round(Wout(:,:,l),10))); 
       Proof_for_d=Proof_for_d*Proof_for_vl;
   end
   Proof=Proof_for_d;
else %% If there are eigenvalues with multiplicity bigger than 1
       Tvc=0; Wout=0; Proof=0;
end
         